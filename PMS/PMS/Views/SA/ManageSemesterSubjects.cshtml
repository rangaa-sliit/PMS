@*Developed By:- Ranga Athapaththu
Developed On:- 2022/09/09*@

@model PMS.Custom_Classes.SemesterSubjectCC

@{
    ViewBag.Title = "ManageSemesterSubjects";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row mt-2 mb-0">
    <div class="col-12">
        <ol class="breadcrumb ml-2 mr-2 pt-2 pb-0 mb-2">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "SA")">Home</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("ManageSemesterRegistrations", "SA")">Manage Semester Registrations</a></li>
            <li class="breadcrumb-item active">Manage Semester Subjects</li>
        </ol>
    </div>
</div>
<hr class="ml-2 mr-2 mt-0 mb-2" />
<div class="container-fluid">
    <h1 class="h3 mb-2 text-gray-800">Manage Semester Subjects</h1>

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Semester Subjects</h6>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("AddOrEditSemesterSubject", "SA", FormMethod.Post, new { onsubmit = "return SubmitSemesterSubjectForm(this)", @id = "semesterRegistrationForm", autocomplete = "off" }))
            {
                <div class="row ssRow">
                    <div class="col-md-6">
                        <div id="ssColumn-left">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(model => model.SemesterId)
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.CalendarYear, "Calendar Year: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.CalendarYear, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.CalendarPeriodName, "Calendar Period: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.CalendarPeriodName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.IntakeYear, "Intake Year: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.IntakeYear, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.IntakeName, "Intake: ")
                                </div>
                                <div class="col-sm-9" id="intakeListDiv">
                                    @Html.EditorFor(model => model.IntakeName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.AcademicYear, "Academic Year: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.AcademicYear, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.AcademicSemester, "Academic Semester: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.AcademicSemester, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.FacultyName, "Faculty: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.FacultyName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.InstituteName, "Awarding Institute: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.InstituteName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.DegreeName, "Degree: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.DegreeName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                            <div class="form-group row">
                                <div class="col-sm-3">
                                    @Html.LabelFor(model => model.SpecializationName, "Specialization: ")
                                </div>
                                <div class="col-sm-9">
                                    @Html.EditorFor(model => model.SpecializationName, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card shadow mb-4">
                            <div class="card-header">
                                <h6 class="m-0 font-weight-bold text-primary">Subject List</h6>
                            </div>
                            <div class="card-body" id="ssColumn-right">
                                <div class="form-group has-search">
                                    <span class="fa fa-search form-control-feedback"></span>
                                    <input type="search" class="form-control" name="ssSearch" id="ssSearch" placeholder="Search Subject" oninput="onSemesterSubjectSearch(this.value)" />
                                </div>
                                <div id="subjectsDiv">
                                    @for (int i = 0; i < Model.SubjectList.Count; i++)
                                    {
                                        <div class="form-check">
                                            @if (Model.ViewingSemesterSubjectIdList.Count != 0)
                                            {
                                                if (Model.ViewingSemesterSubjectIdList.FindIndex(ss => ss == Model.SubjectList[i].SubjectId) != -1)
                                                {
                                                    <input class="form-check-input" type="checkbox" id="@Model.SubjectList[i].SubjectCode" name="semesterSubject" value="@Model.SubjectList[i].SubjectId" onchange = "onSemesterSubjectChange(this)" checked />
                                                }
                                                else
                                                {
                                                    <input class="form-check-input" type="checkbox" id="@Model.SubjectList[i].SubjectCode" name="semesterSubject" value="@Model.SubjectList[i].SubjectId" onchange = "onSemesterSubjectChange(this)" />
                                                }
                                            }
                                            else
                                            {
                                                <input class="form-check-input" type="checkbox" id="@Model.SubjectList[i].SubjectCode" name="semesterSubject" value="@Model.SubjectList[i].SubjectId" onchange = "onSemesterSubjectChange(this)" />
                                            }
                                            <label class="form-check-label">@Model.SubjectList[i].SubjectCode - @Model.SubjectList[i].SubjectName</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <hr />
                        <div class="form-group float-right">
                            <button class="btn btn-primary" type="submit" id="semesterSubjectSubmitBtn">Save</button>
                            <button class="btn btn-light" type="button" id="semesterSubjectClearBtn" onclick="clearSemesterSubjectForm()">Clear Changes</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        var allSubjects = [];
        var allSelectedSubjectList = [];

        $(document).ready(function () {
            var leftHeight = $("#ssColumn-left").height();
            document.getElementById('subjectsDiv').style.height = (leftHeight - 150) + 'px';
            document.getElementById('subjectsDiv').style.overflowY = 'auto';

            allSubjects = @Html.Raw(Json.Encode(Model.SubjectList));
            allSelectedSubjectList = @Html.Raw(Json.Encode(Model.ViewingSemesterSubjectIdList));
        });

        function SubmitSemesterSubjectForm(form) {
            $(form).removeData("validator");
            $(form).removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            var checkedSubjects = [];

            $("input:checkbox[name=semesterSubject]:checked").each(function () {
                checkedSubjects.push($(this).val());
            });

            if ($(form).valid()) {
                $("#loader").show();
                var fd = new FormData();

                $.each($(form).serializeArray(), function (key, input) {
                    fd.append(input.name, input.value);
                });

                fd.append("PassingSemesterSubjectIdList", JSON.stringify(checkedSubjects));

                $.ajax({
                    type: "POST",
                    url: form.action,
                    data: fd,
                    processData: false,
                    contentType: false,
                    success: function (data) {
                        $("#loader").hide();
                        if (data.success) {
                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "success"
                            })
                        }
                        else {
                            $.notify(data.message, {
                                globalPosition: "top center",
                                className: "error"
                            })
                        }
                    }
                });
            }
            return false;
        }

        function clearSemesterSubjectForm() {
            window.location.reload();
        }

        function onSemesterSubjectChange(chkbox) {
            if ($(chkbox).is(":checked")) {
                allSelectedSubjectList.push($(chkbox).val());
            }
            else {
                allSelectedSubjectList.splice(allSelectedSubjectList.findIndex(s => s == $(chkbox).val()), 1);
            }
        }

        function onSemesterSubjectSearch(val) {
            var dynamicContent = ``;
            $("#subjectsDiv").html("");

            if (val == "" || val == null) {
                $("#semesterSubjectSubmitBtn").prop("disabled", false);
                $("#semesterSubjectClearBtn").prop("disabled", false);
                for (var i = 0; i < allSubjects.length; i++)
                {
                    dynamicContent = dynamicContent + `<div class="form-check">`;

                    if (allSelectedSubjectList.length != 0)
                    {
                        if (allSelectedSubjectList.findIndex(ss => ss == allSubjects[i].SubjectId) != -1)
                        {
                            dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" checked />`;
                        }
                        else
                        {
                            dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" />`;
                        }
                    }
                    else
                    {
                        dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" />`;
                    }
                    dynamicContent = dynamicContent + `<label class="form-check-label">` + allSubjects[i].SubjectCode + " - " + allSubjects[i].SubjectName + `</label></div>`;
                }
                $("#subjectsDiv").html(dynamicContent);
            }
            else {
                $("#semesterSubjectSubmitBtn").prop("disabled", true);
                $("#semesterSubjectClearBtn").prop("disabled", true);
                for (var i = 0; i < allSubjects.length; i++) {
                    if (allSubjects[i].SubjectCode.toLowerCase().includes(val.toLowerCase()) || allSubjects[i].SubjectName.toLowerCase().includes(val.toLowerCase())) {
                        dynamicContent = dynamicContent + `<div class="form-check">`;

                        if (allSelectedSubjectList.length != 0) {
                            if (allSelectedSubjectList.findIndex(ss => ss == allSubjects[i].SubjectId) != -1) {
                                dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" checked />`;
                            }
                            else {
                                dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" />`;
                            }
                        }
                        else {
                            dynamicContent = dynamicContent + `<input class="form-check-input" type = "checkbox" id = "` + allSubjects[i].SubjectCode + `" name = "semesterSubject" value = "` + allSubjects[i].SubjectId + `" onchange = "onSemesterSubjectChange(this)" />`;
                        }
                        dynamicContent = dynamicContent + `<label class="form-check-label">` + allSubjects[i].SubjectCode + " - " + allSubjects[i].SubjectName + `</label></div>`;
                    }
                }

                $("#subjectsDiv").html(dynamicContent);
            }
        }
    </script>
}