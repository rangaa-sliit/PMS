@*Developed By:- Ranga Athapaththu
Developed On:- 2022/09/05*@

@model PMS.Models.SemesterRegistration

@{
    ViewBag.Title = "AddOrEditSemesterRegistration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row mt-2 mb-0">
    <div class="col-12">
        <ol class="breadcrumb ml-2 mr-2 pt-2 pb-0 mb-2" id="breadCrumbWrapper">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "SA")">Home</a></li>
            <li class="breadcrumb-item"><a href="@Url.Action("ManageSemesterRegistrations", "SA")">Manage Semester Registrations</a></li>
        </ol>
    </div>
</div>
<hr class="ml-2 mr-2 mt-0 mb-2" />
<div class="container-fluid">
    <h1 class="h3 mb-2 text-gray-800" id="aeSemesterRegistrationMainTitle"></h1>

    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary" id="aeSemesterRegistrationCardTitle"></h6>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("AddOrEditSemesterRegistration", "SA", FormMethod.Post, new { onsubmit = "return SubmitSemesterRegistrationForm(this)", @id = "semesterRegistrationForm", autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.SemesterId)
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.CalendarYear, "Calendar Year: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.EditorFor(model => model.CalendarYear, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "calendarYear", oninput = "onCalendarYearInput()" } })
                        @Html.ValidationMessageFor(model => model.CalendarYear)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.CalendarPeriodId, "Calendar Period: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.CalendarPeriodId, (IEnumerable<SelectListItem>)ViewBag.calendarPeriodList, new { @class = "form-control", @id = "calendarPeriodList", onchange = "onCalendarPeriodChange(this.value)" })
                        @Html.ValidationMessageFor(model => model.CalendarPeriodId)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.IntakeYear, "Intake Year: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.IntakeYear, (IEnumerable<SelectListItem>)ViewBag.intakeYearList, new { @class = "form-control", @id = "intakeYearList", onchange = "onIntakeYearChange(this.value)" })
                        @Html.ValidationMessageFor(model => model.IntakeYear)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.AcadamicYear, "Academic Year: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.AcadamicYear, new List<SelectListItem>
                        {
                            new SelectListItem{ Text = "1", Value = "1" },
                            new SelectListItem{ Text = "2", Value = "2" },
                            new SelectListItem{ Text = "3", Value = "3" },
                            new SelectListItem{ Text = "4", Value = "4" }
                        }, new { @class = "form-control", @id = "academicYearList", onchange = "onAcademicYearChange(this.value)" })
                        @Html.ValidationMessageFor(model => model.AcadamicYear)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.AcadamicSemester, "Academic Semester: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.AcadamicSemester, new List<SelectListItem>
                        {
                            new SelectListItem{ Text = "1", Value = "1" },
                            new SelectListItem{ Text = "2", Value = "2" }
                        }, new { @class = "form-control", @id = "academicSemesterList", onchange = "onAcademicSemesterChange(this.value)" })
                        @Html.ValidationMessageFor(model => model.AcadamicSemester)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.FacultyId, "Faculty: ", new { @class = "required" })
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.FacultyId, (IEnumerable<SelectListItem>)ViewBag.facultyList, new { @class = "form-control", @id = "facultyList", onchange = "onFacultyChange(this.value)" })
                        @Html.ValidationMessageFor(model => model.FacultyId)
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-2">
                        @Html.LabelFor(model => model.IsActive, "Status: ")
                    </div>
                    <div class="col-sm-9">
                        @Html.DropDownListFor(model => model.IsActive, new List<SelectListItem>
                        {
                            new SelectListItem{ Text = "Active", Value = "true" },
                            new SelectListItem{ Text = "Inactive", Value = "false" }
                        }, new { @class = "form-control", @id = "semesterRegistrationStatusList", onchange = "onSemesterRegistrationStatusChange(this.value)" })
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    <button class="btn btn-primary" type="submit" id="semesterRegistrationSubmitBtn">Save</button>
                    <button class="btn btn-light" type="button" id="semesterRegistrationClearBtn" onclick="clearSemesterRegistrationForm()">Clear Changes</button>
                </div>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        var operation;

        $(document).ready(function () {
            operation = window.location.pathname.toString().split('/')[4];

            if (operation != undefined) {
                $("#semesterRegistrationSubmitBtn").prop("disabled", true);
                $("#semesterRegistrationClearBtn").prop("disabled", true);
                if (operation == "Edit") {
                    $("#aeSemesterRegistrationMainTitle").html("Edit Semester Registration");
                    $("#aeSemesterRegistrationCardTitle").html("Edit Semester Registration");
                    $("#breadCrumbWrapper").append(`<li class="breadcrumb-item active">Edit Semester Registration</li>`);
                }
                else {
                    $("#aeSemesterRegistrationMainTitle").html("View Semester Registration");
                    $("#aeSemesterRegistrationCardTitle").html("View Semester Registration");
                    $("#breadCrumbWrapper").append(`<li class="breadcrumb-item active">View Semester Registration</li>`);
                    //$("#designationList").prop("disabled", true);
                    //$("#appointmentTypeList").prop("disabled", true);
                    //$("#appointmentFrom").prop("disabled", true);
                    //$("#appointmentTo").prop("disabled", true);
                    //$("#appointmentStatusList").prop("disabled", true);
                }
            }
            else {
                $("#aeSemesterRegistrationMainTitle").html("Add Semester Registration");
                $("#aeSemesterRegistrationCardTitle").html("Add Semester Registration");
                $("#breadCrumbWrapper").append(`<li class="breadcrumb-item active">Add Semester Registration</li>`);
                //$("#employeeList").val("");
                //$("#designationList").val("");
                //$("#appointmentTypeList").val("");
                $("#semesterRegistrationStatusList").val("true");
            }
        })

        function SubmitAppointmentForm(form) {
            $(form).removeData("validator");
            $(form).removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse(form);

            if ($(form).valid()) {
                var fromDate = new Date($("#appointmentFrom").val());
                var toDate = new Date($("#appointmentTo").val());

                if (toDate < fromDate) {
                    alert("Appointment To Date should be greater than Appointment From Date");
                }
                else {
                    $("#loader").show();
                    $.ajax({
                        type: "POST",
                        url: form.action,
                        data: $(form).serialize(),
                        success: function (data) {
                            $("#loader").hide();
                            if (data.success) {
                                if (operation == undefined) {
                                    $("#employeeList").val("");
                                    $("#designationList").val("");
                                    $("#appointmentTypeList").val("");
                                    $("#appointmentFrom").val("");
                                    $("#appointmentTo").val("");
                                    $("#appointmentStatusList").val("true");
                                }

                                $.notify(data.message, {
                                    globalPosition: "top center",
                                    className: "success"
                                })
                            }
                            else {
                                $.notify(data.message, {
                                    globalPosition: "top center",
                                    className: "error"
                                })
                            }
                        }
                    });
                }
            }
            return false;
        }

        function clearAppointmentForm() {
            if (operation == undefined) {
                $("#employeeList").val("");
                $("#designationList").val("");
                $("#appointmentTypeList").val("");
                $("#appointmentFrom").val("");
                $("#appointmentTo").val("");
                $("#appointmentStatusList").val("true");
            }
            else {
                window.location.reload();
            }
        }

        function onEmployeeChange(newEmployee) {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }

        function onDesignationChange(newDesignation) {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }

        function onAppointmentTypeChange(newAppointmentType) {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }

        function onAppointmentFromInput() {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }

        function onAppointmentToInput() {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }

        function onAppointmentStatusChange(newAppointmentStatus) {
            $("#appointmentSubmitBtn").prop("disabled", false);
            $("#appointmentClearBtn").prop("disabled", false);
        }
    </script>
}